name: 'Begin the interview'

on:
  workflow_dispatch:
    inputs:
      github_user:
        description: 'GitHub user'
        required: true
      assignment:
        description: 'Assignment type'
        required: true
        type: choice
        default: 'go'
        options: 
        - 'go'

jobs:
  begin-interview:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
        ref: 'main'

    - uses: actions/github-script@v5
      id: create-repo
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          const user = "${{ github.event.inputs.github_user }}"
          const time = 1640867103632 // Date.now()
          const repo = `${context.repo.repo}-${user}-${time}`
        
          await github.rest.repos.createInOrg({
            org: context.repo.owner,
            name: repo,
            private: true,
            auto_init: true
          })

          core.setOutput('repo-owner', context.repo.owner)
          core.setOutput('repo', repo)

    - uses: actions/github-script@v5
      id: add-collaborator-to-repo
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          const user = "${{ github.event.inputs.github_user }}"
          const repoOwner = "${{ steps.create-repo.outputs.repo-owner }}"
          const repo = "${{ steps.create-repo.outputs.repo }}"
        
          return await github.rest.repos.addCollaborator({
            owner: context.repo.owner,
            repo: repo,
            username: user,
          })

    - uses: actions/github-script@v5
      id: upload-files-to-repo
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          const fs = require("fs")
          const path = require('path')
          
          const repoOwner = "${{ steps.create-repo.outputs.repo-owner }}"
          const repo = "${{ steps.create-repo.outputs.repo }}"

          const assignment = "${{ github.event.inputs.assignment }}"

          const { data: ref } = await github.rest.git.getRef({
            owner: repoOwner,
            repo: repo,
            ref: 'heads/main'
          })

          const { data: commit } = await github.rest.git.getCommit({
            owner: repoOwner,
            repo: repo,
            commit_sha: ref.object.sha,
          })

          const patterns = [`${assignment}/**`, 'input.csv']
          const globber = await glob.create(patterns.join('\n'))
          
          const files = []
          for await (const file of globber.globGenerator()) {

            const content = fs.readFileSync(file, 'utf8')
            
            const { data: blob } = await github.rest.git.createBlob({
              owner: repoOwner,
              repo: repo,
              content: content,
              encoding: 'utf-8'
            })

            files.push({
              path: path.relative("${{ github.workspace }}", file),
              mode: '100644',
              type: 'blob',
              sha: blob.sha
            })
          }

          const { data: tree } = await github.rest.git.createTree({
            owner: repoOwner,
            repo: repo,
            tree: files,
            base_tree: commit.tree.sha
          })

          const { data: newCommit } = await github.rest.git.createCommit({
            owner: repoOwner,
            repo: repo,
            message: "Initializing interview repository ðŸ¤–",
            tree: tree.sha
          })

          await github.rest.git.updateRef({
            owner: repoOwner,
            repo: repo,
            ref: 'heads/main',
            sha: newCommit.sha,
            force: true
          })